[{"filePath":"/Users/pedromacedo/Desktop/Work/University/CBSP-Year5Semester1/Project/src/frontend/src/App.js","messages":[{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":7,"column":5,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":7,"endColumn":26},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":8,"column":7,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":8,"endColumn":17},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":9,"column":7,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":9,"endColumn":15}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import './App.css';\nimport Home from './pages/Home';\nimport Header from './pages/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","usedDeprecatedRules":[]},{"filePath":"/Users/pedromacedo/Desktop/Work/University/CBSP-Year5Semester1/Project/src/frontend/src/App.test.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'test' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":5},{"ruleId":"react/react-in-jsx-scope","severity":2,"message":"'React' must be in scope when using JSX","line":5,"column":10,"nodeType":"JSXOpeningElement","messageId":"notInScope","endLine":5,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'expect' is not defined.","line":7,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":9}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react';\nimport App from './App';\n\ntest('renders learn react link', () => {\n  render(<App />);\n  const linkElement = screen.getByText(/learn react/i);\n  expect(linkElement).toBeInTheDocument();\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/pedromacedo/Desktop/Work/University/CBSP-Year5Semester1/Project/src/frontend/src/components/MusicInfo.jsx","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'musicPlaying' is missing in props validation","line":7,"column":22,"nodeType":"Property","messageId":"missingPropType","endLine":7,"endColumn":34},{"ruleId":"react/prop-types","severity":2,"message":"'setMusicPlaying' is missing in props validation","line":7,"column":36,"nodeType":"Property","messageId":"missingPropType","endLine":7,"endColumn":51},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef' is missing in props validation","line":7,"column":53,"nodeType":"Property","messageId":"missingPropType","endLine":7,"endColumn":61},{"ruleId":"react/prop-types","severity":2,"message":"'musicName' is missing in props validation","line":7,"column":63,"nodeType":"Property","messageId":"missingPropType","endLine":7,"endColumn":72},{"ruleId":"react/prop-types","severity":2,"message":"'setMusicName' is missing in props validation","line":7,"column":74,"nodeType":"Property","messageId":"missingPropType","endLine":7,"endColumn":86},{"ruleId":"react/prop-types","severity":2,"message":"'handleMusicEnd' is missing in props validation","line":7,"column":88,"nodeType":"Property","messageId":"missingPropType","endLine":7,"endColumn":102},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current' is missing in props validation","line":97,"column":17,"nodeType":"Identifier","messageId":"missingPropType","endLine":97,"endColumn":24},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current' is missing in props validation","line":98,"column":14,"nodeType":"Identifier","messageId":"missingPropType","endLine":98,"endColumn":21},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current.src' is missing in props validation","line":98,"column":22,"nodeType":"Identifier","messageId":"missingPropType","endLine":98,"endColumn":25},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current' is missing in props validation","line":131,"column":17,"nodeType":"Identifier","messageId":"missingPropType","endLine":131,"endColumn":24},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current' is missing in props validation","line":132,"column":14,"nodeType":"Identifier","messageId":"missingPropType","endLine":132,"endColumn":21},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current.src' is missing in props validation","line":132,"column":22,"nodeType":"Identifier","messageId":"missingPropType","endLine":132,"endColumn":25},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current' is missing in props validation","line":165,"column":17,"nodeType":"Identifier","messageId":"missingPropType","endLine":165,"endColumn":24},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current' is missing in props validation","line":166,"column":14,"nodeType":"Identifier","messageId":"missingPropType","endLine":166,"endColumn":21},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current.src' is missing in props validation","line":166,"column":22,"nodeType":"Identifier","messageId":"missingPropType","endLine":166,"endColumn":25},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current' is missing in props validation","line":219,"column":34,"nodeType":"Identifier","messageId":"missingPropType","endLine":219,"endColumn":41},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current' is missing in props validation","line":223,"column":16,"nodeType":"Identifier","messageId":"missingPropType","endLine":223,"endColumn":23},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current' is missing in props validation","line":224,"column":33,"nodeType":"Identifier","messageId":"missingPropType","endLine":224,"endColumn":40},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current.currentTime' is missing in props validation","line":224,"column":41,"nodeType":"Identifier","messageId":"missingPropType","endLine":224,"endColumn":52},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current' is missing in props validation","line":225,"column":30,"nodeType":"Identifier","messageId":"missingPropType","endLine":225,"endColumn":37},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current.duration' is missing in props validation","line":225,"column":38,"nodeType":"Identifier","messageId":"missingPropType","endLine":225,"endColumn":46},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'beginAtZero'.","line":320,"column":17,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":320,"endColumn":28},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current' is missing in props validation","line":451,"column":16,"nodeType":"Identifier","messageId":"missingPropType","endLine":451,"endColumn":23},{"ruleId":"react/prop-types","severity":2,"message":"'audioRef.current.play' is missing in props validation","line":451,"column":24,"nodeType":"Identifier","messageId":"missingPropType","endLine":451,"endColumn":28}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { message } from \"antd\";\nimport UploadBtn from \"./buttons/UploadBtn\";\nimport { AnimatePresence, motion } from \"framer-motion\";\n\nconst MusicInfo = ({ musicPlaying, setMusicPlaying, audioRef, musicName, setMusicName, handleMusicEnd }) => {\n\tconst [displayedData, setDisplayedData] = useState([]);\n\tconst [visibleWindowStart, setVisibleWindowStart] = useState(null);\n\tconst [dataReady, setDataReady] = useState(false);\n\n\tconst [bpmData, setBpmData] = useState([]);\n\tconst [audioBPM, setAudioBPM] = useState(0);\n\tconst [audioTempo, setAudioTempo] = useState(\"\");\n\tconst [songName, setSongName] = useState(\"\");\n\tconst [songArtist, setSongArtist] = useState(\"\");\n\n\tconst [mineBpmData, setMineBpmData] = useState([]);\n\tconst [mineAudioBPM, setMineAudioBPM] = useState(0);\n\tconst [mineAudioTempo, setMineAudioTempo] = useState(\"\");\n\tconst [mineDisplayedData, setMineDisplayedData] = useState([]);\n\n\tconst [hybridBpmData, setHybridBpmData] = useState([]);\n\tconst [hybridAudioBPM, setHybridAudioBPM] = useState(0);\n\tconst [hybridAudioTempo, setHybridAudioTempo] = useState(\"\");\n\tconst [hybridDisplayedData, setHybridDisplayedData] = useState([]);\n\n\tconst windowSize = 7; // Number of points to display in the visible window\n\n\tuseEffect(() => {\n\t\tif (\n\t\t\tbpmData.length > 0 &&\n\t\t\tmineBpmData.length > 0 &&\n\t\t\thybridBpmData.length > 0\n\t\t) {\n\t\t\tsetDataReady(true);\n\t\t}\n\t}, [bpmData, mineBpmData, hybridBpmData]);\n\n\t// Handle file selection\n\tconst handleFileChange = (file) => {\n\t\tsetMusicName(file.name);\n\t\tconsole.log(\"Selected file:\", file.name);\n\t};\n\n\t// Handle file upload and processing\n\tconst handleUpload = async (file) => {\n\t\tif (!file) {\n\t\t\tmessage.error(\"Please select a file first.\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst formData = new FormData();\n\t\tformData.append(\"file\", file);\n\n\t\t// Add the new audio data\n\t\tlet newAudioData = {\n\t\t\tname: '',\n\t\t\tsinger: '', \n\t\t\tlibrosaBpm: '',\n\t\t\tlibrosaTempo: '',\n\t\t\tmineBmp: '',\n\t\t\tmineTempo: '',\n\t\t\thybridBpm: '',\n\t\t\thybridTempo: '',\n\t\t};\n\n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t\"http://localhost:8000/api/v1/bpm_per_second\",\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\tbody: formData,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(\"Failed to upload file\");\n\t\t\t}\n\n\t\t\tconst data = await response.json();\n\t\t\tsetBpmData(data.bpm_per_second);\n\t\t\tsetAudioBPM(data.song_bpm);\n\t\t\tsetAudioTempo(data.song_tempo);\n\t\t\tsetSongName(data.song_name);\n\t\t\tsetSongArtist(data.song_artist);\n\n\t\t\tnewAudioData.name = data.song_name || file.name;\n\t\t\tnewAudioData.singer = data.song_artist || '';\n\t\t\tnewAudioData.librosaBpm = data.song_bpm;\n\t\t\tnewAudioData.librosaTempo = data.song_tempo;\n\n\t\t\t// Initialize displayedData with the first windowSize points\n\t\t\tsetDisplayedData(data.bpm_per_second.slice(0, windowSize));\n\n\t\t\t// Set the audio source to play immediately after upload\n\t\t\tif (audioRef.current) {\n\t\t\t\taudioRef.current.src = URL.createObjectURL(file);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error uploading file:\", error);\n\t\t\tmessage.error(\"Failed to upload file. Please try again.\");\n\t\t}\n\n\t\t// Get the BPM and tempo from my algorithm \n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t\"http://localhost:8000/api/v1/mine_bpm_per_second\",\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\tbody: formData,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(\"Failed to upload file\");\n\t\t\t}\n\n\t\t\tconst data = await response.json();\n\t\t\tsetMineBpmData(data.bpm_per_second);\n\t\t\tsetMineAudioBPM(data.song_bpm);\n\t\t\tsetMineAudioTempo(data.song_tempo);\n\n\t\t\tnewAudioData.mineBmp = data.song_bpm;\n\t\t\tnewAudioData.mineTempo = data.song_tempo;\n\n\t\t\t// Initialize displayedData with the first windowSize points\n\t\t\tsetMineDisplayedData(data.bpm_per_second.slice(0, windowSize));\n\n\t\t\t// Set the audio source to play immediately after upload\n\t\t\tif (audioRef.current) {\n\t\t\t\taudioRef.current.src = URL.createObjectURL(file);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error uploading file:\", error);\n\t\t\tmessage.error(\"Failed to upload file. Please try again.\");\n\t\t}\n\n\t\t// Get the BPM and tempo from my algorithm \n\t\ttry {\n\t\t\tconst response = await fetch(\n\t\t\t\t\"http://localhost:8000/api/v1/hybrid_bpm_per_second\",\n\t\t\t\t{\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\tbody: formData,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(\"Failed to upload file\");\n\t\t\t}\n\n\t\t\tconst data = await response.json();\n\t\t\tsetHybridBpmData(data.bpm_per_second);\n\t\t\tsetHybridAudioBPM(data.song_bpm);\n\t\t\tsetHybridAudioTempo(data.song_tempo);\n\n\t\t\tnewAudioData.hybridBpm = data.song_bpm;\n\t\t\tnewAudioData.hybridTempo = data.song_tempo;\n\n\t\t\t// Initialize displayedData with the first windowSize points\n\t\t\tsetHybridDisplayedData(data.bpm_per_second.slice(0, windowSize));\n\n\t\t\t// Set the audio source to play immediately after upload\n\t\t\tif (audioRef.current) {\n\t\t\t\taudioRef.current.src = URL.createObjectURL(file);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Error uploading file:\", error);\n\t\t\tmessage.error(\"Failed to upload file. Please try again.\");\n\t\t}\n\n\t\t// Get the existing audio data from local storage (if any)\n\t\tconst storedAudioData = JSON.parse(localStorage.getItem(\"audio_data\")) || [];\n\t\n\t\tstoredAudioData.push(newAudioData);\n\t\n\t\t// Store the updated audio data back to local storage\n\t\tlocalStorage.setItem(\"audio_data\", JSON.stringify(storedAudioData));\n\n\n\t\tif (\n\t\t\tbpmData.length > 0 &&\n\t\t\tmineBpmData.length > 0 &&\n\t\t\thybridBpmData.length > 0\n\t\t) {\n\t\t\tsetDataReady(true);\n\t\t}\n\n\n\n\n\t\t// DELETE:   Get the music peaks!\n\t\t// try {\n\t\t// \tconst response = await fetch(\n\t\t// \t\t\"http://localhost:8000/api/v1/detect_music\",\n\t\t// \t\t{\n\t\t// \t\t\tmethod: \"POST\",\n\t\t// \t\t\tbody: formData,\n\t\t// \t\t}\n\t\t// \t);\n\n\t\t// \tif (!response.ok) {\n\t\t// \t\tthrow new Error(\"Failed to upload file\");\n\t\t// \t}\n\n\t\t// \tconst data = await response.json();\n\t\t// \tsetMusicPeaks(data.peaks);\n\n\t\t// \tconsole.log(\"Peaks: \", data.peaks);\n\t\t// } catch (error) {\n\t\t// \tconsole.error(\"Error getting file frequency peaks:\", error);\n\t\t// \tmessage.error(\"Failed to get file frequency peaks. Please try again.\");\n\t\t// }\n\t};\n\n\t// Update the visible window of data as the song progresses\n\tconst handleTimeUpdate = () => {\n\t\tif (!musicPlaying || !audioRef.current || bpmData.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (audioRef.current && bpmData.length > 0) {\n\t\t\tconst currentTime = audioRef.current.currentTime;\n\t\t\tconst duration = audioRef.current.duration;\n\n\t\t\t// Calculate the index of the latest visible data point based on playback\n\t\t\tconst maxVisibleIndex = Math.floor(\n\t\t\t\t(currentTime / duration) * bpmData.length\n\t\t\t);\n\n\t\t\t// Define the start and end of the window for displayed data\n\t\t\tconst windowStart = Math.max(0, maxVisibleIndex - windowSize);\n\t\t\tsetVisibleWindowStart(windowStart); // Update the visible window start\n\n\t\t\t// Update the displayedData to only show points in the current window\n\t\t\tconst visibleData = bpmData.slice(windowStart, maxVisibleIndex + 1);\n\t\t\tsetDisplayedData(visibleData);\n\n\t\t\tconst mineVisibleData = mineBpmData.slice(windowStart, maxVisibleIndex + 1);\n\t\t\tsetMineDisplayedData(mineVisibleData);\n\n\t\t\tconst hybridVisibleData = hybridBpmData.slice(windowStart, maxVisibleIndex + 1);\n\t\t\tsetHybridDisplayedData(hybridVisibleData);\n\t\t}\n\t};\n\n\tconst options = {\n\t\tresponsive: true,\n\t\tmaintainAspectRatio: false,\n\t\tlayout: {\n\t\t\tpadding: {\n\t\t\t\tright: 30,\n\t\t\t\tbottom: 20,\n\t\t\t},\n\t\t},\n\t\tanimation: {\n\t\t\tduration: 0, // Disable animation to prevent \"rising\" effect from the bottom\n\t\t\tanimateScale: true,\n\t\t\tanimateRotate: true,\n\t\t\tx: {\n\t\t\t\tduration: 500, // Smooth transition for x-axis only\n\t\t\t\teasing: \"linear\",\n\t\t\t},\n\t\t\ty: {\n\t\t\t\tduration: 0, // Disable y-axis animation to prevent \"rise\"\n\t\t\t},\n\t\t},\n\t\tplugins: {\n\t\t\ttooltip: {\n\t\t\t\tenabled: true,\n\t\t\t\tmode: \"nearest\",\n\t\t\t\tintersect: false,\n\t\t\t\tcallbacks: {\n\t\t\t\t\tlabel: function (context) {\n\t\t\t\t\t\treturn `BPM: ${context.parsed.y}`;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tlegend: {\n\t\t\t\tposition: \"top\",\n\t\t\t\tlabels: {\n\t\t\t\t\tboxWidth: 20,\n\t\t\t\t\tpadding: 15,\n\t\t\t\t},\n\t\t\t},\n\t\t\t// Custom plugin to animate only the x-axis changes for smooth horizontal sliding\n\t\t\tchartArea: {\n\t\t\t\tbackgroundColor: (context) => {\n\t\t\t\t\tconst chart = context.chart;\n\t\t\t\t\tconst {\n\t\t\t\t\t\tctx,\n\t\t\t\t\t\tchartArea: { left, right, top, bottom },\n\t\t\t\t\t} = chart;\n\t\t\t\t\tctx.save();\n\t\t\t\t\tctx.fillStyle = \"rgba(0, 0, 0, 0.1)\";\n\t\t\t\t\tctx.fillRect(left, top, right - left, bottom - top);\n\t\t\t\t\tctx.restore();\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tscales: {\n\t\t\tx: {\n\t\t\t\ttitle: {\n\t\t\t\t\tdisplay: true,\n\t\t\t\t\ttext: \"Time (Seconds)\",\n\t\t\t\t},\n\t\t\t\tticks: {\n\t\t\t\t\tautoSkip: false,\n\t\t\t\t\tmaxTicksLimit: windowSize,\n                    rotation: 0\n\t\t\t\t},\n\t\t\t},\n\t\t\ty: {\n\t\t\t\tbeginAtZero: true,\n\t\t\t\ttitle: {\n\t\t\t\t\tdisplay: true,\n\t\t\t\t\ttext: \"BPM\",\n\t\t\t\t},\n                beginAtZero: false, // Dynamically adjust to BPM range\n\t\t\t},\n\t\t},\n\t};\n\n\t// Generate x-axis labels for the current window\n\tconst chartLabels = Array.from(\n\t\t{ length: displayedData.length },\n\t\t(_, i) => (i + visibleWindowStart) * 5 // 5-second intervals\n\t);\n\n\t// Prepare data for the chart\n\tconst chartData = {\n\t\tlabels: chartLabels,\n\t\tdatasets: [\n\t\t\t{\n\t\t\t\tlabel: \"Librosa BPM\",\n\t\t\t\tdata: displayedData,\n\t\t\t\tborderColor: \"rgba(75, 192, 192, 1)\",\n\t\t\t\tbackgroundColor: \"rgba(75, 192, 192, 0.2)\",\n\t\t\t\tborderWidth: 2,\n\t\t\t\ttension: 0.2,\n\t\t\t\tpointRadius: 3,\n\t\t\t\tpointHoverRadius: 5,\n\t\t\t\tpointBackgroundColor: \"rgba(75, 192, 192, 1)\", // Fixed color\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: \"Mine BPM\",\n\t\t\t\tdata: mineDisplayedData,\n\t\t\t\tborderColor: \"rgba(255, 99, 132, 1)\",\n\t\t\t\tbackgroundColor: \"rgba(255, 99, 132, 0.2)\",\n\t\t\t\tborderWidth: 2,\n\t\t\t\ttension: 0.2,\n\t\t\t\tpointRadius: 3,\n\t\t\t\tpointHoverRadius: 5,\n\t\t\t\tpointBackgroundColor: \"rgba(255, 99, 132, 1)\", // Fixed color\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: \"Hybrid BPM\",\n\t\t\t\tdata: hybridDisplayedData,\n\t\t\t\tborderColor: \"rgba(0, 0, 255, 1)\",\n\t\t\t\tbackgroundColor: \"rgba(0, 0, 255, 0.2)\",\n\t\t\t\tborderWidth: 2,\n\t\t\t\ttension: 0.2,\n\t\t\t\tpointRadius: 3,\n\t\t\t\tpointHoverRadius: 5,\n\t\t\t\tpointBackgroundColor: \"rgba(0, 0, 255, 1)\", // Fixed color\n\t\t\t},\n\t\t],\n\t};\n\n\treturn (\n\t\t<div className=\"h-full space-y-12 flex flex-col items-center justify-center\">\n            <AnimatePresence>\n                <motion.div \n                    className=\"w-full space-y-4\"\n                    initial={{ opacity: 0, y: -10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: -10 }}\n                    key=\"musicInfoSection\"\n                >\n                    <h1 className=\"space-x-3 text-xl md:text-2xl text-gray-600 font-semibold text-wrap\">\n                        <span>{songName ? songName : musicName}</span>\n\t\t\t\t\t\t{songArtist && (<span className=\"text-gray-400 text-sm\">by {songArtist}</span>)}\n                    </h1>\n                    <div className=\"space-y-5\">\n                        <UploadBtn\n                            onUploadComplete={(file) => {\n                                handleFileChange(file);\n                                handleUpload(file); // Call handleUpload immediately after file selection\n                            }}\n                        />\n                    </div>\n                </motion.div>\n\n                <motion.div \n                    className=\"flex flex-col w-full space-y-8\"\n                    initial={{ opacity: 0, y: -10 }}\n\t\t\t\t\tanimate={{ opacity: 1, y: 0 }}\n\t\t\t\t\texit={{ opacity: 0, y: -10 }}\n\t\t\t\t\tkey=\"chartSection\"\n                >\n                    {dataReady && (\n                        <div className=\"w-full flex justify-center\">\n                            <div className=\"w-full md:w-4/5 h-[400px] mt-[20px]\">\n                                <Line data={chartData} options={options} />\n                            </div>\n                        </div>\n                    )}\n\n                    {(audioBPM && audioTempo && hybridAudioTempo !== \"\") ? \n                        (\n                            <div className=\"w-2/3 flex flex-col mx-auto space-y-3 justify-center\">\n                                <div className=\"flex flex-col items-start\">\n                                    <h4 className=\"text-md\">\n                                        <span className=\"font-semibold\">Audio overall BPM:</span> {audioBPM ? audioBPM : \"-\"}\n                                    </h4>\n                                    <h4 className=\"text-md\">\n                                    <span className=\"font-semibold\">Audio tempo:</span> {audioTempo ? audioTempo : \"-\"}\n                                    </h4>\n                                </div>\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col items-start\">\n                                    <h4 className=\"text-md\">\n                                        <span className=\"font-semibold\">Mine Audio overall BPM:</span> {mineAudioBPM ? mineAudioBPM : \"-\"}\n                                    </h4>\n                                    <h4 className=\"text-md\">\n                                    <span className=\"font-semibold\">Mine Audio tempo:</span> {mineAudioTempo ? mineAudioTempo : \"-\"}\n                                    </h4>\n                                </div>\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col items-start\">\n                                    <h4 className=\"text-md\">\n                                        <span className=\"font-semibold\">Hybrid Audio overall BPM:</span> {hybridAudioBPM ? hybridAudioBPM : \"-\"}\n                                    </h4>\n                                    <h4 className=\"text-md\">\n                                    <span className=\"font-semibold\">Hybrid Audio tempo:</span> {hybridAudioTempo ? hybridAudioTempo : \"-\"}\n                                    </h4>\n                                </div>\n                            </div>\n                        ) \n                        : \n                        <></>\n                    }\n                </motion.div>\n            </AnimatePresence>\n\n            {/* Audio player (hidden, auto-play when response is successful) */}\n            <audio\n                ref={audioRef}\n                onTimeUpdate={handleTimeUpdate} // Track the time update for sliding window\n                onLoadedData={() => {\n\t\t\t\t\tif (dataReady) {\n\t\t\t\t\t\taudioRef.current.play();\n\t\t\t\t\t\tsetMusicPlaying(true);\n\t\t\t\t\t}\n\t\t\t\t}}\n                onEnded={() => {\n\t\t\t\t\thandleMusicEnd(); \n\t\t\t\t\tsetDisplayedData(bpmData); \n\t\t\t\t\tsetMineDisplayedData(mineBpmData); \n\t\t\t\t\tsetHybridDisplayedData(hybridBpmData);\n\t\t\t\t}}\n                hidden\n            />\n\n\n\t\t\t{/* <span>{JSON.stringify(musicPeaks)}</span> */}\n\t\t</div>\n\t);\n};\n\nexport default MusicInfo;\n","usedDeprecatedRules":[]},{"filePath":"/Users/pedromacedo/Desktop/Work/University/CBSP-Year5Semester1/Project/src/frontend/src/components/MusicPlayer.jsx","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'musicPlaying' is missing in props validation","line":6,"column":24,"nodeType":"Property","messageId":"missingPropType","endLine":6,"endColumn":36},{"ruleId":"react/prop-types","severity":2,"message":"'setMusicPlaying' is missing in props validation","line":6,"column":38,"nodeType":"Property","messageId":"missingPropType","endLine":6,"endColumn":53},{"ruleId":"react/prop-types","severity":2,"message":"'musicName' is missing in props validation","line":6,"column":55,"nodeType":"Property","messageId":"missingPropType","endLine":6,"endColumn":64},{"ruleId":"react/prop-types","severity":2,"message":"'rotation' is missing in props validation","line":6,"column":66,"nodeType":"Property","messageId":"missingPropType","endLine":6,"endColumn":74},{"ruleId":"react/prop-types","severity":2,"message":"'setRotation' is missing in props validation","line":6,"column":76,"nodeType":"Property","messageId":"missingPropType","endLine":6,"endColumn":87}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { AnimatePresence } from \"motion/react\";\nimport \"../App.css\";\n\nconst MusicPlayer = ({ musicPlaying, setMusicPlaying, musicName, rotation, setRotation }) => {\n    const lastTimestamp = useRef(null); // Track the timestamp of the last rotation update\n    const rotationRef = useRef(rotation);\n\n    useEffect(() => {\n        if (musicPlaying) {\n            lastTimestamp.current = performance.now();\n            requestAnimationFrame(animateRotation);\n        } else {\n            // Pause rotation when music is paused\n            lastTimestamp.current = null;\n        }\n    }, [musicPlaying]);\n\n    const animateRotation = (timestamp) => {\n        if (lastTimestamp.current != null) {\n            // Calculate the elapsed time\n            const elapsed = timestamp - lastTimestamp.current;\n            const degreesPerSecond = 180; // Adjust speed as needed\n\n            // Update rotation based on elapsed time\n            const newRotation = rotationRef.current + (elapsed / 1000) * degreesPerSecond;\n            setRotation(newRotation % 360); // Keep rotation within 0 - 360 degrees\n            rotationRef.current = newRotation % 360; // Update the rotation reference\n\n            lastTimestamp.current = timestamp;\n        }\n        \n        if (musicPlaying) {\n            requestAnimationFrame(animateRotation);\n        }\n    };\n\n\treturn (\n\t\t<div className=\"w-full flex flex-col items-center\">\n\t\t\t<img\n\t\t\t\tsrc=\"/logo192.png\"\n                className=\"w-[300px]\"\n                style={{\n                    transform: `rotate(${rotation}deg)`,\n                    transition: musicPlaying ? \"none\" : \"transform 0.1s linear\",\n                }}\n\t\t\t/>\n\t\t\t{musicName !== \"File not uploaded\" && (\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => setMusicPlaying(!musicPlaying)}\n\t\t\t\t\tclassName=\"z-10 text-wrap\"\n\t\t\t\t>\n\t\t\t\t\t<AnimatePresence mode=\"sync\">\n\t\t\t\t\t\t{musicPlaying ? (\n\t\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\t\tkey=\"pause-icon\"\n\t\t\t\t\t\t\t\tinitial={{ opacity: 0 }}\n\t\t\t\t\t\t\t\tanimate={{ opacity: 1 }}\n\t\t\t\t\t\t\t\texit={{ opacity: 0 }}\n\t\t\t\t\t\t\t\ttransition={{ duration: 0.5 }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t\t\t\tstrokeWidth={1.5}\n\t\t\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\t\t\tclassName=\"size-6\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\t\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\t\t\t\t\t\td=\"M14.25 9v6m-4.5 0V9M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<motion.div\n\t\t\t\t\t\t\t\tkey=\"play-icon\"\n\t\t\t\t\t\t\t\tinitial={{ opacity: 0 }}\n\t\t\t\t\t\t\t\tanimate={{ opacity: 1 }}\n\t\t\t\t\t\t\t\texit={{ opacity: 0 }}\n\t\t\t\t\t\t\t\ttransition={{ duration: 0.5 }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<svg\n\t\t\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\t\t\t\t\tstrokeWidth={1.5}\n\t\t\t\t\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\t\t\t\t\tclassName=\"size-6\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\t\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\t\t\t\t\t\td=\"M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\t\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\t\t\t\t\t\td=\"M15.91 11.672a.375.375 0 0 1 0 .656l-5.603 3.113a.375.375 0 0 1-.557-.328V8.887c0-.286.307-.466.557-.327l5.603 3.112Z\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t\t</motion.div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</AnimatePresence>\n\t\t\t\t</button>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport default MusicPlayer;\n","usedDeprecatedRules":[]},{"filePath":"/Users/pedromacedo/Desktop/Work/University/CBSP-Year5Semester1/Project/src/frontend/src/components/Table.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/pedromacedo/Desktop/Work/University/CBSP-Year5Semester1/Project/src/frontend/src/components/buttons/UploadBtn.jsx","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'onUploadComplete' is missing in props validation","line":5,"column":22,"nodeType":"Property","messageId":"missingPropType","endLine":5,"endColumn":38}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport { Button, Upload } from \"antd\";\n\nconst UploadBtn = ({ onUploadComplete }) => {\n\tconst uploadProps = {\n\t\tname: \"file\",\n\t\theaders: {\n\t\t\tauthorization: \"authorization-text\",\n\t\t},\n\t\tshowUploadList: false, // Disable the file list display\n\t\tbeforeUpload(file) {\n\t\t\t// This function is triggered before the file is uploaded\n\t\t\t// Call the `onUploadComplete` with the selected file\n\t\t\tif (onUploadComplete) {\n\t\t\t\tonUploadComplete(file); // Pass the file to the parent component\n\t\t\t}\n\t\t\treturn false; // Prevent the default upload behavior\n\t\t},\n\t};\n\n\treturn (\n\t\t<Upload {...uploadProps}>\n\t\t\t<Button icon={<UploadOutlined />}>Click to Upload</Button>\n\t\t</Upload>\n\t);\n};\n\nexport default UploadBtn;\n","usedDeprecatedRules":[]},{"filePath":"/Users/pedromacedo/Desktop/Work/University/CBSP-Year5Semester1/Project/src/frontend/src/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/pedromacedo/Desktop/Work/University/CBSP-Year5Semester1/Project/src/frontend/src/pages/Header.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/pedromacedo/Desktop/Work/University/CBSP-Year5Semester1/Project/src/frontend/src/pages/Home.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/pedromacedo/Desktop/Work/University/CBSP-Year5Semester1/Project/src/frontend/src/pages/Statistics.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/pedromacedo/Desktop/Work/University/CBSP-Year5Semester1/Project/src/frontend/src/reportWebVitals.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/pedromacedo/Desktop/Work/University/CBSP-Year5Semester1/Project/src/frontend/src/setupTests.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]